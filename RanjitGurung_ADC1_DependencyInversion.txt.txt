6. Dependency Inversion Principal:
The general idea of this principle is as simple as it is important: High-level modules, which provide complex 
logic, should be easily reusable and unaffected by changes in low-level modules, which provide utility features. 
To achieve that, you need to introduce an abstraction that decouples the high-level and low-level modules from 
each other.
Based on this idea, Robert C. Martin’s definition of the Dependency Inversion Principle consists of two parts:
1.High-level modules should not depend on low-level modules. Both should depend on abstractions.
2.Abstractions should not depend on details. Details should depend on abstractions.
An important detail of this definition is, that high-level and low-level modules depend on the abstraction. 
The design principle does not just change the direction of the dependency, as you might have expected when
 you read its name for the first time. It splits the dependency between the high-level and low-level modules 
by introducing an abstraction between them. So, in the end, you get two dependencies:
1.The high-level module depends on the abstraction, and
2.The low-level depends on the same abstraction.

Example:

1.While replacement, you just have to ensure that the engine/wheel conforms to the car's design 
   (say, the car would accept any 1500 CC engine and will run on any 18 inch wheel).
2.Also, the car might allow you to put a 2000 CC engine in place of the 1500 CC, given the fact
  that the manufacturer (say, Toyota) is the same.
